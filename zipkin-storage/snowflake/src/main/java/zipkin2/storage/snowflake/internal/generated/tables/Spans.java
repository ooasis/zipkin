/*
 * Copyright 2015-2018 The OpenZipkin Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This file is generated by jOOQ.
 */
package zipkin2.storage.snowflake.internal.generated.tables;


import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import zipkin2.storage.snowflake.internal.generated.Public;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.7"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Spans extends TableImpl<Record> {

    private static final long serialVersionUID = 586358769;

    /**
     * The reference instance of <code>PUBLIC.SPANS</code>
     */
    public static final Spans SPANS = new Spans();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<Record> getRecordType() {
        return Record.class;
    }

    /**
     * The column <code>PUBLIC.SPANS.TRACE_ID</code>.
     */
    public final TableField<Record, String> TRACE_ID = createField("TRACE_ID", org.jooq.impl.SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * The column <code>PUBLIC.SPANS.NAME</code>.
     */
    public final TableField<Record, String> NAME = createField("NAME", org.jooq.impl.SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * The column <code>PUBLIC.SPANS.PARENT_ID</code>.
     */
    public final TableField<Record, String> PARENT_ID = createField("PARENT_ID", org.jooq.impl.SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * The column <code>PUBLIC.SPANS.ID</code>.
     */
    public final TableField<Record, String> ID = createField("ID", org.jooq.impl.SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * The column <code>PUBLIC.SPANS.KIND</code>.
     */
    public final TableField<Record, String> KIND = createField("KIND", org.jooq.impl.SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>PUBLIC.SPANS.TIMESTAMP</code>.
     */
    public final TableField<Record, Long> TIMESTAMP = createField("TIMESTAMP", org.jooq.impl.SQLDataType.BIGINT, this, "");

    /**
     * The column <code>PUBLIC.SPANS.DURATION</code>.
     */
    public final TableField<Record, Long> DURATION = createField("DURATION", org.jooq.impl.SQLDataType.BIGINT, this, "");

    /**
     * The column <code>PUBLIC.SPANS.DEBUG</code>.
     */
    public final TableField<Record, Boolean> DEBUG = createField("DEBUG", org.jooq.impl.SQLDataType.BOOLEAN, this, "");

    /**
     * The column <code>PUBLIC.SPANS.SHARE</code>.
     */
    public final TableField<Record, Boolean> SHARE = createField("SHARE", org.jooq.impl.SQLDataType.BOOLEAN, this, "");

    /**
     * The column <code>PUBLIC.SPANS.LOCAL_SERVICE_NAME</code>.
     */
    public final TableField<Record, String> LOCAL_SERVICE_NAME = createField("LOCAL_SERVICE_NAME", org.jooq.impl.SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>PUBLIC.SPANS.LOCAL_IPV4</code>.
     */
    public final TableField<Record, String> LOCAL_IPV4 = createField("LOCAL_IPV4", org.jooq.impl.SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>PUBLIC.SPANS.LOCAL_IPV6</code>.
     */
    public final TableField<Record, String> LOCAL_IPV6 = createField("LOCAL_IPV6", org.jooq.impl.SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>PUBLIC.SPANS.LOCAL_PORT</code>.
     */
    public final TableField<Record, Integer> LOCAL_PORT = createField("LOCAL_PORT", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>PUBLIC.SPANS.REMOTE_SERVICE_NAME</code>.
     */
    public final TableField<Record, String> REMOTE_SERVICE_NAME = createField("REMOTE_SERVICE_NAME", org.jooq.impl.SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>PUBLIC.SPANS.REMOTE_IPV4</code>.
     */
    public final TableField<Record, String> REMOTE_IPV4 = createField("REMOTE_IPV4", org.jooq.impl.SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>PUBLIC.SPANS.REMOTE_IPV6</code>.
     */
    public final TableField<Record, String> REMOTE_IPV6 = createField("REMOTE_IPV6", org.jooq.impl.SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>PUBLIC.SPANS.REMOTE_PORT</code>.
     */
    public final TableField<Record, Integer> REMOTE_PORT = createField("REMOTE_PORT", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * Create a <code>PUBLIC.SPANS</code> table reference
     */
    public Spans() {
        this(DSL.name("SPANS"), null);
    }

    /**
     * Create an aliased <code>PUBLIC.SPANS</code> table reference
     */
    public Spans(String alias) {
        this(DSL.name(alias), SPANS);
    }

    /**
     * Create an aliased <code>PUBLIC.SPANS</code> table reference
     */
    public Spans(Name alias) {
        this(alias, SPANS);
    }

    private Spans(Name alias, Table<Record> aliased) {
        this(alias, aliased, null);
    }

    private Spans(Name alias, Table<Record> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Spans(Table<O> child, ForeignKey<O, Record> key) {
        super(child, key, SPANS);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Spans as(String alias) {
        return new Spans(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Spans as(Name alias) {
        return new Spans(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Spans rename(String name) {
        return new Spans(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Spans rename(Name name) {
        return new Spans(name, null);
    }
}
